"use strict";(self.webpackChunktutorialcpp=self.webpackChunktutorialcpp||[]).push([[9267],{8453:(n,a,i)=>{i.d(a,{R:()=>l,x:()=>t});var e=i(6540);const r={},s=e.createContext(r);function l(n){const a=e.useContext(s);return e.useMemo(function(){return"function"==typeof n?n(a):{...a,...n}},[a,n])}function t(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),e.createElement(s.Provider,{value:a},n.children)}},9024:(n,a,i)=>{i.r(a),i.d(a,{assets:()=>u,contentTitle:()=>t,default:()=>o,frontMatter:()=>l,metadata:()=>e,toc:()=>d});const e=JSON.parse('{"id":"C++/func","title":"Fungsi atau Function","description":"Fungsi (function) adalah blok kode terorganisir yang dapat digunakan kembali untuk melakukan sebuah tugas atau aksi tertentu. Anggap saja fungsi seperti \\"resep\\" dalam program: kamu menuliskannya sekali, lalu bisa \\"memasaknya\\" (memanggilnya) kapan pun kamu butuh tanpa harus menulis ulang semua langkahnya.","source":"@site/docs/C++/func.md","sourceDirName":"C++","slug":"/C++/func","permalink":"/docs/C++/func","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Array","permalink":"/docs/C++/array"},"next":{"title":"Latihan Pemrograman C++","permalink":"/docs/C++/small_exercises"}}');var r=i(4848),s=i(8453);const l={sidebar_position:10},t="Fungsi atau Function",u={},d=[{value:"Struktur Dasar Fungsi",id:"struktur-dasar-fungsi",level:2},{value:"Contoh Fungsi Sederhana",id:"contoh-fungsi-sederhana",level:2},{value:"Jenis-jenis Fungsi",id:"jenis-jenis-fungsi",level:2},{value:"Contoh Program Lengkap",id:"contoh-program-lengkap",level:2},{value:"Tips Penggunaan Fungsi",id:"tips-penggunaan-fungsi",level:2}];function c(n){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsxs)(a.h1,{id:"fungsi-atau-function",children:["Fungsi atau ",(0,r.jsx)(a.code,{children:"Function"})]})}),"\n",(0,r.jsx)(a.p,{children:'Fungsi (function) adalah blok kode terorganisir yang dapat digunakan kembali untuk melakukan sebuah tugas atau aksi tertentu. Anggap saja fungsi seperti "resep" dalam program: kamu menuliskannya sekali, lalu bisa "memasaknya" (memanggilnya) kapan pun kamu butuh tanpa harus menulis ulang semua langkahnya.'}),"\n",(0,r.jsx)(a.h2,{id:"struktur-dasar-fungsi",children:"Struktur Dasar Fungsi"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsxs)(a.li,{children:["tipe return itu tipe data contoh ",(0,r.jsx)(a.code,{children:"int"}),", ",(0,r.jsx)(a.code,{children:"float"})," , ",(0,r.jsx)(a.code,{children:"double"})," , dan kawan kawanny."]}),"\n",(0,r.jsx)(a.li,{children:"nama fungsi nanti yang akan dipanggil di baris program lain"}),"\n",(0,r.jsxs)(a.li,{children:["return nilai sesuai dengan data type awal kalo awalny ",(0,r.jsx)(a.code,{children:"int"})," ya return nya ",(0,r.jsx)(a.code,{children:"int"})," juga"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-cpp",children:"tipe_return nama_fungsi(parameter) {\r\n    // kode yang akan dijalankan\r\n    return nilai;  // opsional, sesuai tipe_return\r\n}\n"})}),"\n",(0,r.jsx)(a.h2,{id:"contoh-fungsi-sederhana",children:"Contoh Fungsi Sederhana"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-cpp",children:'int tambah(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\nvoid sayHello() {\r\n    cout << "Hello World!" << endl;\r\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"jenis-jenis-fungsi",children:"Jenis-jenis Fungsi"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.strong,{children:"Fungsi dengan Return Value"})}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-cpp",children:"int hitungLuas(int panjang, int lebar) {\r\n    return panjang * lebar;\r\n}\r\n\r\n// Cara pakai\r\nint luas = hitungLuas(5, 3);  // luas = 15\n"})}),"\n",(0,r.jsxs)(a.ol,{start:"2",children:["\n",(0,r.jsxs)(a.li,{children:[(0,r.jsx)(a.strong,{children:"Fungsi Void (Tanpa Return)"}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"fungsi ini ada buat execute logic aja gk mengembalikan nilai sama sekali"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-cpp",children:'void tampilkanNilai(string nama, int nilai) {\r\n    cout << nama << " mendapat nilai " << nilai << endl;\r\n}\r\n\r\n// Cara pakai\r\ntampilkanNilai("John", 85);\n'})}),"\n",(0,r.jsxs)(a.ol,{start:"3",children:["\n",(0,r.jsx)(a.li,{children:(0,r.jsx)(a.strong,{children:"Fungsi dengan Parameter Default"})}),"\n"]}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"ini maksud ny nilai bawaan atau default dari parameter itu sendiri semisal parameter ny gk di isi bakal pake bawaanny"}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-cpp",children:'void sapaPengguna(string nama = "User") {\r\n    cout << "Halo " << nama << "!" << endl;\r\n}\r\n\r\n// Cara pakai\r\nsapaPengguna();        // Output: Halo User!\r\nsapaPengguna("John");  // Output: Halo John!\n'})}),"\n",(0,r.jsx)(a.h2,{id:"contoh-program-lengkap",children:"Contoh Program Lengkap"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\n// Deklarasi fungsi\r\nint tambah(int a, int b);\r\nint kurang(int a, int b);\r\nvoid tampilkanHasil(string operasi, int hasil);\r\n\r\nint main() {\r\n    int x = 10, y = 5;\r\n    \r\n    // Memanggil fungsi\r\n    int hasilTambah = tambah(x, y);\r\n    int hasilKurang = kurang(x, y);\r\n    \r\n    // Menampilkan hasil\r\n    tampilkanHasil("Pertambahan", hasilTambah);\r\n    tampilkanHasil("Pengurangan", hasilKurang);\r\n    \r\n    return 0;\r\n}\r\n\r\n// Definisi fungsi\r\nint tambah(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\nint kurang(int a, int b) {\r\n    return a - b;\r\n}\r\n\r\nvoid tampilkanHasil(string operasi, int hasil) {\r\n    cout << "Hasil " << operasi << ": " << hasil << endl;\r\n}\n'})}),"\n",(0,r.jsx)(a.h2,{id:"tips-penggunaan-fungsi",children:"Tips Penggunaan Fungsi"}),"\n",(0,r.jsxs)(a.ol,{children:["\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Penamaan Fungsi"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Gunakan nama yang jelas dan deskriptif"}),"\n",(0,r.jsx)(a.li,{children:"Ikuti konvensi penamaan (camelCase atau snake_case)"}),"\n",(0,r.jsx)(a.li,{children:"Nama harus menggambarkan apa yang dilakukan fungsi"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Parameter"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Tentukan tipe data parameter dengan tepat"}),"\n",(0,r.jsx)(a.li,{children:"Gunakan parameter default jika diperlukan"}),"\n",(0,r.jsx)(a.li,{children:"Perhatikan urutan parameter"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Return Value"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Sesuaikan tipe return dengan kebutuhan"}),"\n",(0,r.jsx)(a.li,{children:"Gunakan void jika tidak perlu mengembalikan nilai"}),"\n",(0,r.jsx)(a.li,{children:"Pastikan semua path memiliki return (jika bukan void)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(a.li,{children:["\n",(0,r.jsx)(a.p,{children:(0,r.jsx)(a.strong,{children:"Best Practices"})}),"\n",(0,r.jsxs)(a.ul,{children:["\n",(0,r.jsx)(a.li,{children:"Satu fungsi sebaiknya melakukan satu tugas spesifik"}),"\n",(0,r.jsx)(a.li,{children:"Hindari fungsi yang terlalu panjang"}),"\n",(0,r.jsx)(a.li,{children:"Dokumentasikan fungsi dengan komentar jika perlu"}),"\n",(0,r.jsx)(a.li,{children:"Deklarasikan fungsi sebelum digunakan"}),"\n"]}),"\n"]}),"\n"]})]})}function o(n={}){const{wrapper:a}={...(0,s.R)(),...n.components};return a?(0,r.jsx)(a,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}}}]);